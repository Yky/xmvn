/*-
 * Copyright (c) 2012-2013 Red Hat, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.fedoraproject.maven.rpminstall.plugin;

import static org.fedoraproject.maven.utils.Logger.debug;

import java.io.IOException;
import java.io.PrintStream;
import java.math.BigDecimal;
import java.nio.file.Path;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.TreeSet;

import org.fedoraproject.maven.config.ConfigurationXXX;
import org.fedoraproject.maven.config.InstallerSettings;
import org.fedoraproject.maven.model.Artifact;

public class FragmentFile
    implements DependencyVisitor
{
    private final Map<Artifact, Set<Artifact>> mapping = new TreeMap<>();

    private final Set<Artifact> dependencies = new TreeSet<>();

    private final Set<Artifact> develDependencies = new TreeSet<>();

    private BigDecimal javaVersionRequirement;

    public boolean isEmpty()
    {
        return mapping.isEmpty() && dependencies.isEmpty() && develDependencies.isEmpty()
            && javaVersionRequirement == null;
    }

    private static void addMapping( Map<Artifact, Set<Artifact>> map, Artifact from, Artifact to )
    {
        Set<Artifact> set = map.get( from );
        if ( set == null )
        {
            set = new TreeSet<>();
            map.put( from, set );
        }

        set.add( to );
    }

    public void addMapping( Artifact from, Artifact to )
    {
        addMapping( mapping, from, to );

        debug( "Added mapping ", from, " => ", to );
    }

    @Override
    public void visitRuntimeDependency( String groupId, String artifactId )
    {
        dependencies.add( new Artifact( groupId, artifactId ) );
    }

    @Override
    public void visitBuildDependency( String groupId, String artifactId )
    {
        develDependencies.add( new Artifact( groupId, artifactId ) );
    }

    @Override
    public void visitJavaVersionDependency( BigDecimal version )
    {
        if ( javaVersionRequirement == null || javaVersionRequirement.compareTo( version ) < 0 )
            javaVersionRequirement = version;
    }

    public void optimize()
    {
        Set<Artifact> versionlessArtifacts = new TreeSet<>();
        for ( Artifact artifact : mapping.keySet() )
            versionlessArtifacts.add( artifact.clearVersionAndExtension() );

        for ( Iterator<Artifact> iter = dependencies.iterator(); iter.hasNext(); )
        {
            Artifact dependency = iter.next();
            if ( versionlessArtifacts.contains( dependency ) )
                iter.remove();
        }

        for ( Iterator<Artifact> iter = develDependencies.iterator(); iter.hasNext(); )
        {
            Artifact dependency = iter.next();
            if ( versionlessArtifacts.contains( dependency ) )
                iter.remove();
        }
    }

    public void write( Path path, boolean writeDevel )
        throws IOException
    {
        InstallerSettings installerSettings = ConfigurationXXX.getConfiguration().getInstallerSettings();

        try (PrintStream ps = new PrintStream( path.toFile() ))
        {
            ps.println( "<!-- This depmap file was generated by XMvn. -->" );
            ps.println( "<dependencyMap>" );

            if ( installerSettings.isSkipProvides() )
                ps.println( "<skipProvides/>" );

            if ( javaVersionRequirement != null && !installerSettings.isSkipRequires() )
                ps.println( "  <requiresJava>" + javaVersionRequirement + "</requiresJava>" );

            for ( Artifact mavenArtifact : mapping.keySet() )
            {
                for ( Artifact jppArtifact : mapping.get( mavenArtifact ) )
                {
                    ps.println( "  <dependency>" );
                    ps.println( "    <maven>" );
                    ps.println( "      <groupId>" + mavenArtifact.getGroupId() + "</groupId>" );
                    ps.println( "      <artifactId>" + mavenArtifact.getArtifactId() + "</artifactId>" );
                    ps.println( "      <version>" + mavenArtifact.getVersion() + "</version>" );
                    ps.println( "    </maven>" );
                    ps.println( "    <jpp>" );
                    ps.println( "      <groupId>" + jppArtifact.getGroupId() + "</groupId>" );
                    ps.println( "      <artifactId>" + jppArtifact.getArtifactId() + "</artifactId>" );
                    ps.println( "      <version>" + jppArtifact.getVersion() + "</version>" );
                    ps.println( "    </jpp>" );
                    ps.println( "  </dependency>" );
                }
            }

            if ( !installerSettings.isSkipRequires() )
            {
                Set<Artifact> combinedDependencies = new TreeSet<>( dependencies );
                if ( writeDevel )
                    combinedDependencies.addAll( develDependencies );

                for ( Artifact dependency : combinedDependencies )
                {
                    ps.println( "  <autoRequires>" );
                    ps.println( "    <groupId>" + dependency.getGroupId() + "</groupId>" );
                    ps.println( "    <artifactId>" + dependency.getArtifactId() + "</artifactId>" );
                    ps.println( "  </autoRequires>" );
                }
            }

            ps.println( "</dependencyMap>" );
        }
    }
}
