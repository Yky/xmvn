/*-
 * Copyright (c) 2012-2013 Red Hat, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.fedoraproject.maven.installer;

import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.math.BigDecimal;
import java.nio.file.Path;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;

import org.codehaus.plexus.logging.Logger;
import org.codehaus.plexus.util.xml.pull.MXSerializer;
import org.codehaus.plexus.util.xml.pull.XmlSerializer;
import org.fedoraproject.maven.config.InstallerSettings;
import org.fedoraproject.maven.model.ArtifactImpl;

/**
 * @author Mikolaj Izdebski
 */
public class FragmentFile
    implements DependencyVisitor
{
    private final Logger logger;

    private final Map<ArtifactImpl, Set<ArtifactImpl>> mapping = new HashMap<>();

    private final Set<ArtifactImpl> dependencies = new HashSet<>();

    private final Set<ArtifactImpl> develDependencies = new HashSet<>();

    private BigDecimal javaVersionRequirement;

    public FragmentFile( Logger logger )
    {
        this.logger = logger;
    }

    public boolean isEmpty()
    {
        return mapping.isEmpty() && dependencies.isEmpty() && develDependencies.isEmpty()
            && javaVersionRequirement == null;
    }

    private static void addMapping( Map<ArtifactImpl, Set<ArtifactImpl>> map, ArtifactImpl from, ArtifactImpl to )
    {
        Set<ArtifactImpl> set = map.get( from );
        if ( set == null )
        {
            set = new HashSet<>();
            map.put( from, set );
        }

        set.add( to );
    }

    public void addMapping( ArtifactImpl from, ArtifactImpl to )
    {
        addMapping( mapping, from, to );

        logger.debug( "Added mapping " + from + " => " + to );
    }

    @Override
    public void visitRuntimeDependency( String groupId, String artifactId )
    {
        dependencies.add( new ArtifactImpl( groupId, artifactId ) );
    }

    @Override
    public void visitBuildDependency( String groupId, String artifactId )
    {
        develDependencies.add( new ArtifactImpl( groupId, artifactId ) );
    }

    @Override
    public void visitJavaVersionDependency( BigDecimal version )
    {
        if ( javaVersionRequirement == null || javaVersionRequirement.compareTo( version ) < 0 )
            javaVersionRequirement = version;
    }

    public void optimize()
    {
        Set<ArtifactImpl> versionlessArtifacts = new HashSet<>();
        for ( ArtifactImpl artifact : mapping.keySet() )
            versionlessArtifacts.add( artifact.clearVersionAndExtension() );

        for ( Iterator<ArtifactImpl> iter = dependencies.iterator(); iter.hasNext(); )
        {
            ArtifactImpl dependency = iter.next();
            if ( versionlessArtifacts.contains( dependency ) )
                iter.remove();
        }

        for ( Iterator<ArtifactImpl> iter = develDependencies.iterator(); iter.hasNext(); )
        {
            ArtifactImpl dependency = iter.next();
            if ( versionlessArtifacts.contains( dependency ) )
                iter.remove();
        }
    }

    public void write( Path path, boolean writeDevel, InstallerSettings settings )
        throws IOException
    {
        String ns = null;
        try (Writer writer = new FileWriter( path.toFile() ))
        {
            XmlSerializer s = new MXSerializer();
            s.setProperty( "http://xmlpull.org/v1/doc/properties.html#serializer-indentation", "  " );
            s.setProperty( "http://xmlpull.org/v1/doc/properties.html#serializer-line-separator", "\n" );
            s.setOutput( writer );
            s.startDocument( "US-ASCII", null );
            s.comment( " This depmap file was generated by XMvn " );
            s.startTag( ns, "dependencyMap" );

            if ( settings.isSkipProvides() )
                s.startTag( ns, "skipProvides" ).endTag( ns, "skipProvides" );

            if ( javaVersionRequirement != null && !settings.isSkipRequires() )
                s.startTag( ns, "requiresJava" ).text( javaVersionRequirement.toString() ).endTag( ns, "requiresJava" );

            for ( ArtifactImpl mavenArtifact : mapping.keySet() )
            {
                for ( ArtifactImpl jppArtifact : mapping.get( mavenArtifact ) )
                {
                    s.startTag( ns, "dependency" ).startTag( ns, "maven" );
                    s.startTag( ns, "groupId" ).text( mavenArtifact.getGroupId() ).endTag( ns, "groupId" );
                    s.startTag( ns, "artifactId" ).text( mavenArtifact.getArtifactId() ).endTag( ns, "artifactId" );
                    s.startTag( ns, "version" ).text( mavenArtifact.getVersion() ).endTag( ns, "version" );
                    s.endTag( ns, "maven" ).startTag( ns, "jpp" );
                    s.startTag( ns, "groupId" ).text( jppArtifact.getGroupId() ).endTag( ns, "groupId" );
                    s.startTag( ns, "artifactId" ).text( jppArtifact.getArtifactId() ).endTag( ns, "artifactId" );
                    s.startTag( ns, "version" ).text( jppArtifact.getVersion() ).endTag( ns, "version" );
                    s.endTag( ns, "jpp" ).endTag( ns, "dependency" );
                }
            }

            if ( !settings.isSkipRequires() )
            {
                Set<ArtifactImpl> combinedDependencies = new HashSet<>( dependencies );
                if ( writeDevel )
                    combinedDependencies.addAll( develDependencies );

                for ( ArtifactImpl dependency : combinedDependencies )
                {
                    s.startTag( ns, "autoRequires" );
                    s.startTag( ns, "groupId" ).text( dependency.getGroupId() ).endTag( ns, "groupId" );
                    s.startTag( ns, "artifactId" ).text( dependency.getArtifactId() ).endTag( ns, "artifactId" );
                    s.endTag( ns, "autoRequires" );
                }
            }

            s.endTag( ns, "dependencyMap" );
            s.endDocument();
        }
    }
}
