/*-
 * Copyright (c) 2012-2013 Red Hat, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.fedoraproject.maven.installer.impl;

import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.math.BigDecimal;
import java.nio.file.Path;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

import org.codehaus.plexus.logging.Logger;
import org.codehaus.plexus.util.xml.pull.MXSerializer;
import org.codehaus.plexus.util.xml.pull.XmlSerializer;
import org.eclipse.aether.artifact.Artifact;
import org.eclipse.aether.artifact.DefaultArtifact;
import org.fedoraproject.maven.config.InstallerSettings;
import org.fedoraproject.maven.installer.old.DependencyVisitor;
import org.fedoraproject.maven.utils.ArtifactUtils;

// TODO: make this class non-public (currently tests reference it)
/**
 * @author Mikolaj Izdebski
 */
public class FragmentFile
    implements DependencyVisitor
{
    private final Logger logger;

    private final Map<Artifact, Set<Artifact>> mapping = new HashMap<>();

    private final Set<Artifact> dependencies = new HashSet<>();

    private final Set<Artifact> develDependencies = new HashSet<>();

    private BigDecimal javaVersionRequirement;

    public FragmentFile( Logger logger )
    {
        this.logger = logger;
    }

    public boolean isEmpty()
    {
        return mapping.isEmpty() && dependencies.isEmpty() && develDependencies.isEmpty()
            && javaVersionRequirement == null;
    }

    private static void addMapping( Map<Artifact, Set<Artifact>> map, Artifact from, Artifact to )
    {
        Set<Artifact> set = map.get( from );
        if ( set == null )
        {
            set = new HashSet<>();
            map.put( from, set );
        }

        set.add( to );
    }

    public void addMapping( Artifact from, Artifact to )
    {
        addMapping( mapping, from, to );

        logger.debug( "Added mapping " + from + " => " + to );
    }

    @Override
    public void visitRuntimeDependency( Artifact dependencyArtifact )
    {
        dependencies.add( dependencyArtifact );
    }

    @Override
    public void visitBuildDependency( Artifact dependencyArtifact )
    {
        develDependencies.add( dependencyArtifact );
    }

    @Override
    public void visitJavaVersionDependency( BigDecimal version )
    {
        if ( javaVersionRequirement == null || javaVersionRequirement.compareTo( version ) < 0 )
            javaVersionRequirement = version;
    }

    public void optimize()
    {
        Set<Artifact> versionlessArtifacts = new HashSet<>();
        for ( Artifact artifact : mapping.keySet() )
            versionlessArtifacts.add( new DefaultArtifact( artifact.getGroupId(), artifact.getArtifactId(),
                                                           ArtifactUtils.DEFAULT_EXTENSION,
                                                           ArtifactUtils.DEFAULT_VERSION ) );

        for ( Iterator<Artifact> iter = dependencies.iterator(); iter.hasNext(); )
        {
            Artifact dependency = iter.next();
            if ( versionlessArtifacts.contains( dependency ) )
                iter.remove();
        }

        for ( Iterator<Artifact> iter = develDependencies.iterator(); iter.hasNext(); )
        {
            Artifact dependency = iter.next();
            if ( versionlessArtifacts.contains( dependency ) )
                iter.remove();
        }
    }

    public void write( Path path, boolean writeDevel, InstallerSettings settings )
        throws IOException
    {
        try (Writer writer = new FileWriter( path.toFile() ))
        {
            XmlSerializer s = new MXSerializer();
            s.setProperty( "http://xmlpull.org/v1/doc/properties.html#serializer-indentation", "  " );
            s.setProperty( "http://xmlpull.org/v1/doc/properties.html#serializer-line-separator", "\n" );
            s.setOutput( writer );
            s.startDocument( "US-ASCII", null );
            s.comment( " This depmap file was generated by XMvn " );
            s.text( "\n" );
            s.startTag( null, "dependencyMap" );

            if ( settings.isSkipProvides() )
                s.startTag( null, "skipProvides" ).endTag( null, "skipProvides" );

            if ( javaVersionRequirement != null && !settings.isSkipRequires() )
                s.startTag( null, "requiresJava" ).text( javaVersionRequirement.toString() ).endTag( null,
                                                                                                     "requiresJava" );

            for ( Artifact mavenArtifact : mapping.keySet() )
            {
                for ( Artifact jppArtifact : mapping.get( mavenArtifact ) )
                {
                    s.startTag( null, "dependency" );
                    ArtifactUtils.serialize( mavenArtifact, s, null, "maven" );
                    ArtifactUtils.serialize( jppArtifact, s, null, "jpp" );
                    s.endTag( null, "dependency" );
                }
            }

            if ( !settings.isSkipRequires() )
            {
                Set<Artifact> combinedDependencies = new HashSet<>( dependencies );
                if ( writeDevel )
                    combinedDependencies.addAll( develDependencies );

                for ( Artifact dependency : combinedDependencies )
                    ArtifactUtils.serialize( dependency, s, null, "autoRequires" );
            }

            s.endTag( null, "dependencyMap" );
            s.endDocument();
        }
    }
}
