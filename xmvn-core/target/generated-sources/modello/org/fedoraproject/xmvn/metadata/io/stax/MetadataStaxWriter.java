// =================== DO NOT EDIT THIS FILE ====================
// Generated by Modello 1.8.2,
// any modifications will be overwritten.
// ==============================================================

package org.fedoraproject.xmvn.metadata.io.stax;

  //---------------------------------/
 //- Imported classes and packages -/
//---------------------------------/

import java.io.IOException;
import java.io.OutputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.text.DateFormat;
import java.util.Iterator;
import java.util.Locale;
import java.util.jar.Manifest;
import javax.xml.stream.*;
import org.fedoraproject.xmvn.metadata.ArtifactAlias;
import org.fedoraproject.xmvn.metadata.ArtifactMetadata;
import org.fedoraproject.xmvn.metadata.Dependency;
import org.fedoraproject.xmvn.metadata.DependencyExclusion;
import org.fedoraproject.xmvn.metadata.PackageMetadata;
import org.fedoraproject.xmvn.metadata.SkippedArtifactMetadata;

/**
 * Class MetadataStaxWriter.
 * 
 * @version $Revision$ $Date$
 */
@SuppressWarnings( "all" )
public class MetadataStaxWriter
{

      //--------------------------/
     //- Class/Member Variables -/
    //--------------------------/

    /**
     * Field curId.
     */
    private int curId;

    /**
     * Field idMap.
     */
    private java.util.Map idMap;


      //----------------/
     //- Constructors -/
    //----------------/

    public MetadataStaxWriter()
    {
        idMap = new java.util.HashMap();
    } //-- org.fedoraproject.xmvn.metadata.io.stax.MetadataStaxWriter()


      //-----------/
     //- Methods -/
    //-----------/

    /**
     * Method write.
     * 
     * @param writer
     * @param packageMetadata
     * @throws java.io.IOException
     * @throws XMLStreamException
     */
    public void write( Writer writer, PackageMetadata packageMetadata )
        throws java.io.IOException, XMLStreamException
    {
        XMLOutputFactory factory = XMLOutputFactory.newInstance();
        boolean supportWindowsLineEndings = false;
        if ( factory.isPropertySupported( "com.ctc.wstx.outputEscapeCr" ) )
        {
            factory.setProperty( "com.ctc.wstx.outputEscapeCr", Boolean.FALSE );
            supportWindowsLineEndings = true;
        }
        if ( factory.isPropertySupported( "org.codehaus.stax2.automaticEmptyElements" ) )
        {
            factory.setProperty( "org.codehaus.stax2.automaticEmptyElements", Boolean.FALSE );
        }
        IndentingXMLStreamWriter serializer = new IndentingXMLStreamWriter( factory.createXMLStreamWriter( writer ) );
        if ( supportWindowsLineEndings )
        {
            serializer.setNewLine( serializer.getLineSeparator() );
        }
        serializer.writeStartDocument( packageMetadata.getModelEncoding(), "1.0" );
        writePackageMetadata( packageMetadata, "metadata", serializer );
        serializer.writeEndDocument();
    } //-- void write( Writer, PackageMetadata )

    /**
     * Method write.
     * 
     * @param stream
     * @param packageMetadata
     * @throws java.io.IOException
     * @throws XMLStreamException
     */
    public void write( OutputStream stream, PackageMetadata packageMetadata )
        throws java.io.IOException, XMLStreamException
    {
        XMLOutputFactory factory = XMLOutputFactory.newInstance();
        boolean supportWindowsLineEndings = false;
        if ( factory.isPropertySupported( "com.ctc.wstx.outputEscapeCr" ) )
        {
            factory.setProperty( "com.ctc.wstx.outputEscapeCr", Boolean.FALSE );
            supportWindowsLineEndings = true;
        }
        if ( factory.isPropertySupported( "org.codehaus.stax2.automaticEmptyElements" ) )
        {
            factory.setProperty( "org.codehaus.stax2.automaticEmptyElements", Boolean.FALSE );
        }
        IndentingXMLStreamWriter serializer = new IndentingXMLStreamWriter( factory.createXMLStreamWriter( stream, packageMetadata.getModelEncoding() ) );
        if ( supportWindowsLineEndings )
        {
            serializer.setNewLine( serializer.getLineSeparator() );
        }
        serializer.writeStartDocument( packageMetadata.getModelEncoding(), "1.0" );
        writePackageMetadata( packageMetadata, "metadata", serializer );
        serializer.writeEndDocument();
    } //-- void write( OutputStream, PackageMetadata )

    /**
     * Method writeArtifactAlias.
     * 
     * @param artifactAlias
     * @param serializer
     * @param tagName
     * @throws java.io.IOException
     * @throws XMLStreamException
     */
    private void writeArtifactAlias( ArtifactAlias artifactAlias, String tagName, XMLStreamWriter serializer )
        throws java.io.IOException, XMLStreamException
    {
        if ( artifactAlias != null )
        {
            serializer.writeStartElement( tagName );
            if ( artifactAlias.getGroupId() != null )
            {
                serializer.writeStartElement( "groupId" );
                serializer.writeCharacters( artifactAlias.getGroupId() );
                serializer.writeEndElement();
            }
            if ( artifactAlias.getArtifactId() != null )
            {
                serializer.writeStartElement( "artifactId" );
                serializer.writeCharacters( artifactAlias.getArtifactId() );
                serializer.writeEndElement();
            }
            if ( ( artifactAlias.getExtension() != null ) && !artifactAlias.getExtension().equals( "jar" ) )
            {
                serializer.writeStartElement( "extension" );
                serializer.writeCharacters( artifactAlias.getExtension() );
                serializer.writeEndElement();
            }
            if ( ( artifactAlias.getClassifier() != null ) && !artifactAlias.getClassifier().equals( "" ) )
            {
                serializer.writeStartElement( "classifier" );
                serializer.writeCharacters( artifactAlias.getClassifier() );
                serializer.writeEndElement();
            }
            serializer.writeEndElement();
        }
    } //-- void writeArtifactAlias( ArtifactAlias, String, XMLStreamWriter )

    /**
     * Method writeArtifactMetadata.
     * 
     * @param artifactMetadata
     * @param serializer
     * @param tagName
     * @throws java.io.IOException
     * @throws XMLStreamException
     */
    private void writeArtifactMetadata( ArtifactMetadata artifactMetadata, String tagName, XMLStreamWriter serializer )
        throws java.io.IOException, XMLStreamException
    {
        if ( artifactMetadata != null )
        {
            serializer.writeStartElement( tagName );
            if ( artifactMetadata.getGroupId() != null )
            {
                serializer.writeStartElement( "groupId" );
                serializer.writeCharacters( artifactMetadata.getGroupId() );
                serializer.writeEndElement();
            }
            if ( artifactMetadata.getArtifactId() != null )
            {
                serializer.writeStartElement( "artifactId" );
                serializer.writeCharacters( artifactMetadata.getArtifactId() );
                serializer.writeEndElement();
            }
            if ( ( artifactMetadata.getExtension() != null ) && !artifactMetadata.getExtension().equals( "jar" ) )
            {
                serializer.writeStartElement( "extension" );
                serializer.writeCharacters( artifactMetadata.getExtension() );
                serializer.writeEndElement();
            }
            if ( ( artifactMetadata.getClassifier() != null ) && !artifactMetadata.getClassifier().equals( "" ) )
            {
                serializer.writeStartElement( "classifier" );
                serializer.writeCharacters( artifactMetadata.getClassifier() );
                serializer.writeEndElement();
            }
            if ( artifactMetadata.getVersion() != null )
            {
                serializer.writeStartElement( "version" );
                serializer.writeCharacters( artifactMetadata.getVersion() );
                serializer.writeEndElement();
            }
            if ( artifactMetadata.getPath() != null )
            {
                serializer.writeStartElement( "path" );
                serializer.writeCharacters( artifactMetadata.getPath() );
                serializer.writeEndElement();
            }
            if ( ( artifactMetadata.getNamespace() != null ) && !artifactMetadata.getNamespace().equals( "" ) )
            {
                serializer.writeStartElement( "namespace" );
                serializer.writeCharacters( artifactMetadata.getNamespace() );
                serializer.writeEndElement();
            }
            if ( artifactMetadata.getUuid() != null )
            {
                serializer.writeStartElement( "uuid" );
                serializer.writeCharacters( artifactMetadata.getUuid() );
                serializer.writeEndElement();
            }
            if ( ( artifactMetadata.getProperties() != null ) && ( artifactMetadata.getProperties().size() > 0 ) )
            {
                serializer.writeStartElement( "properties" );
                for ( Iterator iter = artifactMetadata.getProperties().keySet().iterator(); iter.hasNext(); )
                {
                    String key = (String) iter.next();
                    String value = (String) artifactMetadata.getProperties().get( key );
                    serializer.writeStartElement( "" + key + "" );
                    serializer.writeCharacters( value );
                    serializer.writeEndElement();
                }
                serializer.writeEndElement();
            }
            if ( ( artifactMetadata.getCompatVersions() != null ) && ( artifactMetadata.getCompatVersions().size() > 0 ) )
            {
                serializer.writeStartElement( "compatVersions" );
                for ( Iterator iter = artifactMetadata.getCompatVersions().iterator(); iter.hasNext(); )
                {
                    String compatVersion = (String) iter.next();
                    serializer.writeStartElement( "version" );
                    serializer.writeCharacters( compatVersion );
                    serializer.writeEndElement();
                }
                serializer.writeEndElement();
            }
            if ( ( artifactMetadata.getAliases() != null ) && ( artifactMetadata.getAliases().size() > 0 ) )
            {
                serializer.writeStartElement( "aliases" );
                for ( Iterator iter = artifactMetadata.getAliases().iterator(); iter.hasNext(); )
                {
                    ArtifactAlias o = (ArtifactAlias) iter.next();
                    writeArtifactAlias( o, "alias", serializer );
                }
                serializer.writeEndElement();
            }
            if ( ( artifactMetadata.getDependencies() != null ) && ( artifactMetadata.getDependencies().size() > 0 ) )
            {
                serializer.writeStartElement( "dependencies" );
                for ( Iterator iter = artifactMetadata.getDependencies().iterator(); iter.hasNext(); )
                {
                    Dependency o = (Dependency) iter.next();
                    writeDependency( o, "dependency", serializer );
                }
                serializer.writeEndElement();
            }
            serializer.writeEndElement();
        }
    } //-- void writeArtifactMetadata( ArtifactMetadata, String, XMLStreamWriter )

    /**
     * Method writeDependency.
     * 
     * @param dependency
     * @param serializer
     * @param tagName
     * @throws java.io.IOException
     * @throws XMLStreamException
     */
    private void writeDependency( Dependency dependency, String tagName, XMLStreamWriter serializer )
        throws java.io.IOException, XMLStreamException
    {
        if ( dependency != null )
        {
            serializer.writeStartElement( tagName );
            if ( dependency.getGroupId() != null )
            {
                serializer.writeStartElement( "groupId" );
                serializer.writeCharacters( dependency.getGroupId() );
                serializer.writeEndElement();
            }
            if ( dependency.getArtifactId() != null )
            {
                serializer.writeStartElement( "artifactId" );
                serializer.writeCharacters( dependency.getArtifactId() );
                serializer.writeEndElement();
            }
            if ( ( dependency.getExtension() != null ) && !dependency.getExtension().equals( "jar" ) )
            {
                serializer.writeStartElement( "extension" );
                serializer.writeCharacters( dependency.getExtension() );
                serializer.writeEndElement();
            }
            if ( ( dependency.getClassifier() != null ) && !dependency.getClassifier().equals( "" ) )
            {
                serializer.writeStartElement( "classifier" );
                serializer.writeCharacters( dependency.getClassifier() );
                serializer.writeEndElement();
            }
            if ( ( dependency.getRequestedVersion() != null ) && !dependency.getRequestedVersion().equals( "SYSTEM" ) )
            {
                serializer.writeStartElement( "requestedVersion" );
                serializer.writeCharacters( dependency.getRequestedVersion() );
                serializer.writeEndElement();
            }
            if ( ( dependency.getResolvedVersion() != null ) && !dependency.getResolvedVersion().equals( "SYSTEM" ) )
            {
                serializer.writeStartElement( "resolvedVersion" );
                serializer.writeCharacters( dependency.getResolvedVersion() );
                serializer.writeEndElement();
            }
            if ( ( dependency.getNamespace() != null ) && !dependency.getNamespace().equals( "" ) )
            {
                serializer.writeStartElement( "namespace" );
                serializer.writeCharacters( dependency.getNamespace() );
                serializer.writeEndElement();
            }
            if ( ( dependency.getExclusions() != null ) && ( dependency.getExclusions().size() > 0 ) )
            {
                serializer.writeStartElement( "exclusions" );
                for ( Iterator iter = dependency.getExclusions().iterator(); iter.hasNext(); )
                {
                    DependencyExclusion o = (DependencyExclusion) iter.next();
                    writeDependencyExclusion( o, "exclusion", serializer );
                }
                serializer.writeEndElement();
            }
            serializer.writeEndElement();
        }
    } //-- void writeDependency( Dependency, String, XMLStreamWriter )

    /**
     * Method writeDependencyExclusion.
     * 
     * @param dependencyExclusion
     * @param serializer
     * @param tagName
     * @throws java.io.IOException
     * @throws XMLStreamException
     */
    private void writeDependencyExclusion( DependencyExclusion dependencyExclusion, String tagName, XMLStreamWriter serializer )
        throws java.io.IOException, XMLStreamException
    {
        if ( dependencyExclusion != null )
        {
            serializer.writeStartElement( tagName );
            if ( dependencyExclusion.getGroupId() != null )
            {
                serializer.writeStartElement( "groupId" );
                serializer.writeCharacters( dependencyExclusion.getGroupId() );
                serializer.writeEndElement();
            }
            if ( dependencyExclusion.getArtifactId() != null )
            {
                serializer.writeStartElement( "artifactId" );
                serializer.writeCharacters( dependencyExclusion.getArtifactId() );
                serializer.writeEndElement();
            }
            serializer.writeEndElement();
        }
    } //-- void writeDependencyExclusion( DependencyExclusion, String, XMLStreamWriter )

    /**
     * Method writePackageMetadata.
     * 
     * @param packageMetadata
     * @param serializer
     * @param tagName
     * @throws java.io.IOException
     * @throws XMLStreamException
     */
    private void writePackageMetadata( PackageMetadata packageMetadata, String tagName, XMLStreamWriter serializer )
        throws java.io.IOException, XMLStreamException
    {
        if ( packageMetadata != null )
        {
            serializer.setDefaultNamespace( "http://fedorahosted.org/xmvn/METADATA/2.0.0" );
            serializer.writeStartElement( tagName );
            serializer.writeDefaultNamespace( "http://fedorahosted.org/xmvn/METADATA/2.0.0" );
            if ( packageMetadata.getUuid() != null )
            {
                serializer.writeStartElement( "uuid" );
                serializer.writeCharacters( packageMetadata.getUuid() );
                serializer.writeEndElement();
            }
            if ( ( packageMetadata.getProperties() != null ) && ( packageMetadata.getProperties().size() > 0 ) )
            {
                serializer.writeStartElement( "properties" );
                for ( Iterator iter = packageMetadata.getProperties().keySet().iterator(); iter.hasNext(); )
                {
                    String key = (String) iter.next();
                    String value = (String) packageMetadata.getProperties().get( key );
                    serializer.writeStartElement( "" + key + "" );
                    serializer.writeCharacters( value );
                    serializer.writeEndElement();
                }
                serializer.writeEndElement();
            }
            if ( ( packageMetadata.getArtifacts() != null ) && ( packageMetadata.getArtifacts().size() > 0 ) )
            {
                serializer.writeStartElement( "artifacts" );
                for ( Iterator iter = packageMetadata.getArtifacts().iterator(); iter.hasNext(); )
                {
                    ArtifactMetadata o = (ArtifactMetadata) iter.next();
                    writeArtifactMetadata( o, "artifact", serializer );
                }
                serializer.writeEndElement();
            }
            if ( ( packageMetadata.getSkippedArtifacts() != null ) && ( packageMetadata.getSkippedArtifacts().size() > 0 ) )
            {
                serializer.writeStartElement( "skippedArtifacts" );
                for ( Iterator iter = packageMetadata.getSkippedArtifacts().iterator(); iter.hasNext(); )
                {
                    SkippedArtifactMetadata o = (SkippedArtifactMetadata) iter.next();
                    writeSkippedArtifactMetadata( o, "skippedArtifact", serializer );
                }
                serializer.writeEndElement();
            }
            serializer.writeEndElement();
        }
    } //-- void writePackageMetadata( PackageMetadata, String, XMLStreamWriter )

    /**
     * Method writeSkippedArtifactMetadata.
     * 
     * @param skippedArtifactMetadata
     * @param serializer
     * @param tagName
     * @throws java.io.IOException
     * @throws XMLStreamException
     */
    private void writeSkippedArtifactMetadata( SkippedArtifactMetadata skippedArtifactMetadata, String tagName, XMLStreamWriter serializer )
        throws java.io.IOException, XMLStreamException
    {
        if ( skippedArtifactMetadata != null )
        {
            serializer.writeStartElement( tagName );
            if ( skippedArtifactMetadata.getGroupId() != null )
            {
                serializer.writeStartElement( "groupId" );
                serializer.writeCharacters( skippedArtifactMetadata.getGroupId() );
                serializer.writeEndElement();
            }
            if ( skippedArtifactMetadata.getArtifactId() != null )
            {
                serializer.writeStartElement( "artifactId" );
                serializer.writeCharacters( skippedArtifactMetadata.getArtifactId() );
                serializer.writeEndElement();
            }
            if ( ( skippedArtifactMetadata.getExtension() != null ) && !skippedArtifactMetadata.getExtension().equals( "jar" ) )
            {
                serializer.writeStartElement( "extension" );
                serializer.writeCharacters( skippedArtifactMetadata.getExtension() );
                serializer.writeEndElement();
            }
            if ( ( skippedArtifactMetadata.getClassifier() != null ) && !skippedArtifactMetadata.getClassifier().equals( "" ) )
            {
                serializer.writeStartElement( "classifier" );
                serializer.writeCharacters( skippedArtifactMetadata.getClassifier() );
                serializer.writeEndElement();
            }
            serializer.writeEndElement();
        }
    } //-- void writeSkippedArtifactMetadata( SkippedArtifactMetadata, String, XMLStreamWriter )

}
