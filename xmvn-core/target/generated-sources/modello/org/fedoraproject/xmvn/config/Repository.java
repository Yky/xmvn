// =================== DO NOT EDIT THIS FILE ====================
// Generated by Modello 1.8.2,
// any modifications will be overwritten.
// ==============================================================

package org.fedoraproject.xmvn.config;

/**
 * Artifact repository.
 * 
 * @version $Revision$ $Date$
 */
@SuppressWarnings( "all" )
public class Repository
    implements java.io.Serializable, java.lang.Cloneable
{

      //--------------------------/
     //- Class/Member Variables -/
    //--------------------------/

    /**
     * Unique string identifying this repository.
     */
    private String id;

    /**
     * 
     *             Role hint of Plexus component implementing the
     * repository.
     *           
     */
    private String type;

    /**
     * Field stereotypes.
     */
    private java.util.List<Stereotype> stereotypes;

    /**
     * Field properties.
     */
    private java.util.Properties properties;

    /**
     * 
     *             Arbitrary XML used to configure structure of the
     *             repository.  Configuration can be freely used by
     * the
     *             implementation, so their exact meaning depends
     * on
     *             repository type.  See documentation for
     * repository types
     *             to see the format of supported configuration (if
     * any).
     *           
     */
    private Object configuration;

    /**
     * 
     *             A boolean expression describing which artifacts
     * can be
     *             stored in this repository.
     *           
     */
    private Object filter;


      //-----------/
     //- Methods -/
    //-----------/

    /**
     * Method addProperty.
     * 
     * @param key
     * @param value
     */
    public void addProperty( String key, String value )
    {
        getProperties().put( key, value );
    } //-- void addProperty( String, String )

    /**
     * Method addStereotype.
     * 
     * @param stereotype
     */
    public void addStereotype( Stereotype stereotype )
    {
        getStereotypes().add( stereotype );
    } //-- void addStereotype( Stereotype )

    /**
     * Method clone.
     * 
     * @return Repository
     */
    public Repository clone()
    {
        try
        {
            Repository copy = (Repository) super.clone();

            if ( this.stereotypes != null )
            {
                copy.stereotypes = new java.util.ArrayList<Stereotype>();
                for ( Stereotype item : this.stereotypes )
                {
                    copy.stereotypes.add( ( (Stereotype) item).clone() );
                }
            }

            if ( this.properties != null )
            {
                copy.properties = (java.util.Properties) this.properties.clone();
            }

            if ( this.configuration != null )
            {
                copy.configuration = new org.codehaus.plexus.util.xml.Xpp3Dom( (org.codehaus.plexus.util.xml.Xpp3Dom) this.configuration );
            }

            if ( this.filter != null )
            {
                copy.filter = new org.codehaus.plexus.util.xml.Xpp3Dom( (org.codehaus.plexus.util.xml.Xpp3Dom) this.filter );
            }

            return copy;
        }
        catch ( java.lang.Exception ex )
        {
            throw (java.lang.RuntimeException) new java.lang.UnsupportedOperationException( getClass().getName()
                + " does not support clone()" ).initCause( ex );
        }
    } //-- Repository clone()

    /**
     * Get arbitrary XML used to configure structure of the
     *             repository.  Configuration can be freely used by
     * the
     *             implementation, so their exact meaning depends
     * on
     *             repository type.  See documentation for
     * repository types
     *             to see the format of supported configuration (if
     * any).
     * 
     * @return Object
     */
    public Object getConfiguration()
    {
        return this.configuration;
    } //-- Object getConfiguration()

    /**
     * Get a boolean expression describing which artifacts can be
     *             stored in this repository.
     * 
     * @return Object
     */
    public Object getFilter()
    {
        return this.filter;
    } //-- Object getFilter()

    /**
     * Get unique string identifying this repository.
     * 
     * @return String
     */
    public String getId()
    {
        return this.id;
    } //-- String getId()

    /**
     * Method getProperties.
     * 
     * @return Properties
     */
    public java.util.Properties getProperties()
    {
        if ( this.properties == null )
        {
            this.properties = new java.util.Properties();
        }

        return this.properties;
    } //-- java.util.Properties getProperties()

    /**
     * Method getStereotypes.
     * 
     * @return List
     */
    public java.util.List<Stereotype> getStereotypes()
    {
        if ( this.stereotypes == null )
        {
            this.stereotypes = new java.util.ArrayList<Stereotype>();
        }

        return this.stereotypes;
    } //-- java.util.List<Stereotype> getStereotypes()

    /**
     * Get role hint of Plexus component implementing the
     * repository.
     * 
     * @return String
     */
    public String getType()
    {
        return this.type;
    } //-- String getType()

    /**
     * Method removeStereotype.
     * 
     * @param stereotype
     */
    public void removeStereotype( Stereotype stereotype )
    {
        getStereotypes().remove( stereotype );
    } //-- void removeStereotype( Stereotype )

    /**
     * Set arbitrary XML used to configure structure of the
     *             repository.  Configuration can be freely used by
     * the
     *             implementation, so their exact meaning depends
     * on
     *             repository type.  See documentation for
     * repository types
     *             to see the format of supported configuration (if
     * any).
     * 
     * @param configuration
     */
    public void setConfiguration( Object configuration )
    {
        this.configuration = configuration;
    } //-- void setConfiguration( Object )

    /**
     * Set a boolean expression describing which artifacts can be
     *             stored in this repository.
     * 
     * @param filter
     */
    public void setFilter( Object filter )
    {
        this.filter = filter;
    } //-- void setFilter( Object )

    /**
     * Set unique string identifying this repository.
     * 
     * @param id
     */
    public void setId( String id )
    {
        this.id = id;
    } //-- void setId( String )

    /**
     * Set properties associated with this repository.  Properties
     *             can be freely used by the implementation, so
     * their exact
     *             meaning depends on repository type.  See
     * documentation for
     *             repository types to see list of supported
     * properties.
     * 
     * @param properties
     */
    public void setProperties( java.util.Properties properties )
    {
        this.properties = properties;
    } //-- void setProperties( java.util.Properties )

    /**
     * Set list of artifact types that can be stored in this
     *             repository.  Empty list means that this
     * repository can
     *             store any artifact type.
     * 
     * @param stereotypes
     */
    public void setStereotypes( java.util.List<Stereotype> stereotypes )
    {
        this.stereotypes = stereotypes;
    } //-- void setStereotypes( java.util.List )

    /**
     * Set role hint of Plexus component implementing the
     * repository.
     * 
     * @param type
     */
    public void setType( String type )
    {
        this.type = type;
    } //-- void setType( String )

}
