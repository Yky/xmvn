// =================== DO NOT EDIT THIS FILE ====================
// Generated by Modello 1.8.2,
// any modifications will be overwritten.
// ==============================================================

package org.fedoraproject.xmvn.config.io.stax;

  //---------------------------------/
 //- Imported classes and packages -/
//---------------------------------/

import java.io.IOException;
import java.io.OutputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.text.DateFormat;
import java.util.Iterator;
import java.util.Locale;
import java.util.jar.Manifest;
import javax.xml.stream.*;
import org.codehaus.plexus.util.xml.Xpp3Dom;
import org.fedoraproject.xmvn.config.Artifact;
import org.fedoraproject.xmvn.config.BuildSettings;
import org.fedoraproject.xmvn.config.Configuration;
import org.fedoraproject.xmvn.config.InstallerSettings;
import org.fedoraproject.xmvn.config.PackagingRule;
import org.fedoraproject.xmvn.config.Repository;
import org.fedoraproject.xmvn.config.ResolverSettings;
import org.fedoraproject.xmvn.config.Stereotype;

/**
 * Class ConfigurationStaxWriter.
 * 
 * @version $Revision$ $Date$
 */
@SuppressWarnings( "all" )
public class ConfigurationStaxWriter
{

      //--------------------------/
     //- Class/Member Variables -/
    //--------------------------/

    /**
     * Field curId.
     */
    private int curId;

    /**
     * Field idMap.
     */
    private java.util.Map idMap;


      //----------------/
     //- Constructors -/
    //----------------/

    public ConfigurationStaxWriter()
    {
        idMap = new java.util.HashMap();
    } //-- org.fedoraproject.xmvn.config.io.stax.ConfigurationStaxWriter()


      //-----------/
     //- Methods -/
    //-----------/

    /**
     * Method write.
     * 
     * @param writer
     * @param configuration
     * @throws java.io.IOException
     * @throws XMLStreamException
     */
    public void write( Writer writer, Configuration configuration )
        throws java.io.IOException, XMLStreamException
    {
        XMLOutputFactory factory = XMLOutputFactory.newInstance();
        boolean supportWindowsLineEndings = false;
        if ( factory.isPropertySupported( "com.ctc.wstx.outputEscapeCr" ) )
        {
            factory.setProperty( "com.ctc.wstx.outputEscapeCr", Boolean.FALSE );
            supportWindowsLineEndings = true;
        }
        if ( factory.isPropertySupported( "org.codehaus.stax2.automaticEmptyElements" ) )
        {
            factory.setProperty( "org.codehaus.stax2.automaticEmptyElements", Boolean.FALSE );
        }
        IndentingXMLStreamWriter serializer = new IndentingXMLStreamWriter( factory.createXMLStreamWriter( writer ) );
        if ( supportWindowsLineEndings )
        {
            serializer.setNewLine( serializer.getLineSeparator() );
        }
        serializer.writeStartDocument( configuration.getModelEncoding(), "1.0" );
        writeConfiguration( configuration, "configuration", serializer );
        serializer.writeEndDocument();
    } //-- void write( Writer, Configuration )

    /**
     * Method write.
     * 
     * @param stream
     * @param configuration
     * @throws java.io.IOException
     * @throws XMLStreamException
     */
    public void write( OutputStream stream, Configuration configuration )
        throws java.io.IOException, XMLStreamException
    {
        XMLOutputFactory factory = XMLOutputFactory.newInstance();
        boolean supportWindowsLineEndings = false;
        if ( factory.isPropertySupported( "com.ctc.wstx.outputEscapeCr" ) )
        {
            factory.setProperty( "com.ctc.wstx.outputEscapeCr", Boolean.FALSE );
            supportWindowsLineEndings = true;
        }
        if ( factory.isPropertySupported( "org.codehaus.stax2.automaticEmptyElements" ) )
        {
            factory.setProperty( "org.codehaus.stax2.automaticEmptyElements", Boolean.FALSE );
        }
        IndentingXMLStreamWriter serializer = new IndentingXMLStreamWriter( factory.createXMLStreamWriter( stream, configuration.getModelEncoding() ) );
        if ( supportWindowsLineEndings )
        {
            serializer.setNewLine( serializer.getLineSeparator() );
        }
        serializer.writeStartDocument( configuration.getModelEncoding(), "1.0" );
        writeConfiguration( configuration, "configuration", serializer );
        serializer.writeEndDocument();
    } //-- void write( OutputStream, Configuration )

    /**
     * Method writeArtifact.
     * 
     * @param artifact
     * @param serializer
     * @param tagName
     * @throws java.io.IOException
     * @throws XMLStreamException
     */
    private void writeArtifact( Artifact artifact, String tagName, XMLStreamWriter serializer )
        throws java.io.IOException, XMLStreamException
    {
        if ( artifact != null )
        {
            serializer.writeStartElement( tagName );
            if ( ( artifact.getGroupId() != null ) && !artifact.getGroupId().equals( "" ) )
            {
                serializer.writeStartElement( "groupId" );
                serializer.writeCharacters( artifact.getGroupId() );
                serializer.writeEndElement();
            }
            if ( ( artifact.getArtifactId() != null ) && !artifact.getArtifactId().equals( "" ) )
            {
                serializer.writeStartElement( "artifactId" );
                serializer.writeCharacters( artifact.getArtifactId() );
                serializer.writeEndElement();
            }
            if ( ( artifact.getVersion() != null ) && !artifact.getVersion().equals( "" ) )
            {
                serializer.writeStartElement( "version" );
                serializer.writeCharacters( artifact.getVersion() );
                serializer.writeEndElement();
            }
            if ( ( artifact.getClassifier() != null ) && !artifact.getClassifier().equals( "" ) )
            {
                serializer.writeStartElement( "classifier" );
                serializer.writeCharacters( artifact.getClassifier() );
                serializer.writeEndElement();
            }
            if ( ( artifact.getStereotype() != null ) && !artifact.getStereotype().equals( "" ) )
            {
                serializer.writeStartElement( "stereotype" );
                serializer.writeCharacters( artifact.getStereotype() );
                serializer.writeEndElement();
            }
            if ( ( artifact.getExtension() != null ) && !artifact.getExtension().equals( "" ) )
            {
                serializer.writeStartElement( "extension" );
                serializer.writeCharacters( artifact.getExtension() );
                serializer.writeEndElement();
            }
            serializer.writeEndElement();
        }
    } //-- void writeArtifact( Artifact, String, XMLStreamWriter )

    /**
     * Method writeBuildSettings.
     * 
     * @param buildSettings
     * @param serializer
     * @param tagName
     * @throws java.io.IOException
     * @throws XMLStreamException
     */
    private void writeBuildSettings( BuildSettings buildSettings, String tagName, XMLStreamWriter serializer )
        throws java.io.IOException, XMLStreamException
    {
        if ( buildSettings != null )
        {
            serializer.writeStartElement( tagName );
            if ( buildSettings.isDebug() != null )
            {
                serializer.writeStartElement( "debug" );
                serializer.writeCharacters( String.valueOf( buildSettings.isDebug() ) );
                serializer.writeEndElement();
            }
            if ( buildSettings.isSkipTests() != null )
            {
                serializer.writeStartElement( "skipTests" );
                serializer.writeCharacters( String.valueOf( buildSettings.isSkipTests() ) );
                serializer.writeEndElement();
            }
            if ( buildSettings.getCompilerSource() != null )
            {
                serializer.writeStartElement( "compilerSource" );
                serializer.writeCharacters( buildSettings.getCompilerSource() );
                serializer.writeEndElement();
            }
            serializer.writeEndElement();
        }
    } //-- void writeBuildSettings( BuildSettings, String, XMLStreamWriter )

    /**
     * Method writeConfiguration.
     * 
     * @param configuration
     * @param serializer
     * @param tagName
     * @throws java.io.IOException
     * @throws XMLStreamException
     */
    private void writeConfiguration( Configuration configuration, String tagName, XMLStreamWriter serializer )
        throws java.io.IOException, XMLStreamException
    {
        if ( configuration != null )
        {
            serializer.setDefaultNamespace( "http://fedorahosted.org/xmvn/CONFIG/2.0.0" );
            serializer.writeStartElement( tagName );
            serializer.writeDefaultNamespace( "http://fedorahosted.org/xmvn/CONFIG/2.0.0" );
            if ( ( configuration.getProperties() != null ) && ( configuration.getProperties().size() > 0 ) )
            {
                serializer.writeStartElement( "properties" );
                for ( Iterator iter = configuration.getProperties().keySet().iterator(); iter.hasNext(); )
                {
                    String key = (String) iter.next();
                    String value = (String) configuration.getProperties().get( key );
                    serializer.writeStartElement( "" + key + "" );
                    serializer.writeCharacters( value );
                    serializer.writeEndElement();
                }
                serializer.writeEndElement();
            }
            if ( ( configuration.getRepositories() != null ) && ( configuration.getRepositories().size() > 0 ) )
            {
                serializer.writeStartElement( "repositories" );
                for ( Iterator iter = configuration.getRepositories().iterator(); iter.hasNext(); )
                {
                    Repository o = (Repository) iter.next();
                    writeRepository( o, "repository", serializer );
                }
                serializer.writeEndElement();
            }
            if ( configuration.getBuildSettings() != null )
            {
                writeBuildSettings( (BuildSettings) configuration.getBuildSettings(), "buildSettings", serializer );
            }
            if ( ( configuration.getArtifactManagement() != null ) && ( configuration.getArtifactManagement().size() > 0 ) )
            {
                serializer.writeStartElement( "artifactManagement" );
                for ( Iterator iter = configuration.getArtifactManagement().iterator(); iter.hasNext(); )
                {
                    PackagingRule o = (PackagingRule) iter.next();
                    writePackagingRule( o, "rule", serializer );
                }
                serializer.writeEndElement();
            }
            if ( configuration.getResolverSettings() != null )
            {
                writeResolverSettings( (ResolverSettings) configuration.getResolverSettings(), "resolverSettings", serializer );
            }
            if ( configuration.getInstallerSettings() != null )
            {
                writeInstallerSettings( (InstallerSettings) configuration.getInstallerSettings(), "installerSettings", serializer );
            }
            serializer.writeEndElement();
        }
    } //-- void writeConfiguration( Configuration, String, XMLStreamWriter )

    /**
     * Method writeDom.
     * 
     * @param dom
     * @param serializer
     * @throws XMLStreamException
     */
    private void writeDom( Xpp3Dom dom, XMLStreamWriter serializer )
        throws XMLStreamException
    {
        serializer.writeStartElement( dom.getName() );
        String[] attributeNames = dom.getAttributeNames();
        for ( int i = 0; i < attributeNames.length; i++ )
        {
            String attributeName = attributeNames[i];
            serializer.writeAttribute( attributeName, dom.getAttribute( attributeName ) );
        }
        Xpp3Dom[] children = dom.getChildren();
        for ( int i = 0; i < children.length; i++ )
        {
            writeDom( children[i], serializer );
        }
        String value = dom.getValue();
        if ( value != null )
        {
            serializer.writeCharacters( value );
        }
        serializer.writeEndElement();
    } //-- void writeDom( Xpp3Dom, XMLStreamWriter )

    /**
     * Method writeInstallerSettings.
     * 
     * @param installerSettings
     * @param serializer
     * @param tagName
     * @throws java.io.IOException
     * @throws XMLStreamException
     */
    private void writeInstallerSettings( InstallerSettings installerSettings, String tagName, XMLStreamWriter serializer )
        throws java.io.IOException, XMLStreamException
    {
        if ( installerSettings != null )
        {
            serializer.writeStartElement( tagName );
            if ( installerSettings.isDebug() != null )
            {
                serializer.writeStartElement( "debug" );
                serializer.writeCharacters( String.valueOf( installerSettings.isDebug() ) );
                serializer.writeEndElement();
            }
            if ( installerSettings.getMetadataDir() != null )
            {
                serializer.writeStartElement( "metadataDir" );
                serializer.writeCharacters( installerSettings.getMetadataDir() );
                serializer.writeEndElement();
            }
            serializer.writeEndElement();
        }
    } //-- void writeInstallerSettings( InstallerSettings, String, XMLStreamWriter )

    /**
     * Method writePackagingRule.
     * 
     * @param packagingRule
     * @param serializer
     * @param tagName
     * @throws java.io.IOException
     * @throws XMLStreamException
     */
    private void writePackagingRule( PackagingRule packagingRule, String tagName, XMLStreamWriter serializer )
        throws java.io.IOException, XMLStreamException
    {
        if ( packagingRule != null )
        {
            serializer.writeStartElement( tagName );
            if ( packagingRule.getArtifactGlob() != null )
            {
                writeArtifact( (Artifact) packagingRule.getArtifactGlob(), "artifactGlob", serializer );
            }
            if ( packagingRule.getTargetPackage() != null )
            {
                serializer.writeStartElement( "targetPackage" );
                serializer.writeCharacters( packagingRule.getTargetPackage() );
                serializer.writeEndElement();
            }
            if ( packagingRule.getTargetRepository() != null )
            {
                serializer.writeStartElement( "targetRepository" );
                serializer.writeCharacters( packagingRule.getTargetRepository() );
                serializer.writeEndElement();
            }
            if ( ( packagingRule.getFiles() != null ) && ( packagingRule.getFiles().size() > 0 ) )
            {
                serializer.writeStartElement( "files" );
                for ( Iterator iter = packagingRule.getFiles().iterator(); iter.hasNext(); )
                {
                    String file = (String) iter.next();
                    serializer.writeStartElement( "file" );
                    serializer.writeCharacters( file );
                    serializer.writeEndElement();
                }
                serializer.writeEndElement();
            }
            if ( ( packagingRule.getVersions() != null ) && ( packagingRule.getVersions().size() > 0 ) )
            {
                serializer.writeStartElement( "versions" );
                for ( Iterator iter = packagingRule.getVersions().iterator(); iter.hasNext(); )
                {
                    String version = (String) iter.next();
                    serializer.writeStartElement( "version" );
                    serializer.writeCharacters( version );
                    serializer.writeEndElement();
                }
                serializer.writeEndElement();
            }
            if ( ( packagingRule.getAliases() != null ) && ( packagingRule.getAliases().size() > 0 ) )
            {
                serializer.writeStartElement( "aliases" );
                for ( Iterator iter = packagingRule.getAliases().iterator(); iter.hasNext(); )
                {
                    Artifact o = (Artifact) iter.next();
                    writeArtifact( o, "alias", serializer );
                }
                serializer.writeEndElement();
            }
            if ( packagingRule.isOptional() != null )
            {
                serializer.writeStartElement( "optional" );
                serializer.writeCharacters( String.valueOf( packagingRule.isOptional() ) );
                serializer.writeEndElement();
            }
            serializer.writeEndElement();
        }
    } //-- void writePackagingRule( PackagingRule, String, XMLStreamWriter )

    /**
     * Method writeRepository.
     * 
     * @param repository
     * @param serializer
     * @param tagName
     * @throws java.io.IOException
     * @throws XMLStreamException
     */
    private void writeRepository( Repository repository, String tagName, XMLStreamWriter serializer )
        throws java.io.IOException, XMLStreamException
    {
        if ( repository != null )
        {
            serializer.writeStartElement( tagName );
            if ( repository.getId() != null )
            {
                serializer.writeStartElement( "id" );
                serializer.writeCharacters( repository.getId() );
                serializer.writeEndElement();
            }
            if ( repository.getType() != null )
            {
                serializer.writeStartElement( "type" );
                serializer.writeCharacters( repository.getType() );
                serializer.writeEndElement();
            }
            if ( ( repository.getStereotypes() != null ) && ( repository.getStereotypes().size() > 0 ) )
            {
                serializer.writeStartElement( "stereotypes" );
                for ( Iterator iter = repository.getStereotypes().iterator(); iter.hasNext(); )
                {
                    Stereotype o = (Stereotype) iter.next();
                    writeStereotype( o, "stereotype", serializer );
                }
                serializer.writeEndElement();
            }
            if ( ( repository.getProperties() != null ) && ( repository.getProperties().size() > 0 ) )
            {
                serializer.writeStartElement( "properties" );
                for ( Iterator iter = repository.getProperties().keySet().iterator(); iter.hasNext(); )
                {
                    String key = (String) iter.next();
                    String value = (String) repository.getProperties().get( key );
                    serializer.writeStartElement( "" + key + "" );
                    serializer.writeCharacters( value );
                    serializer.writeEndElement();
                }
                serializer.writeEndElement();
            }
            if ( repository.getConfiguration() != null )
            {
                writeDom( (Xpp3Dom) repository.getConfiguration(), serializer );
            }
            if ( repository.getFilter() != null )
            {
                writeDom( (Xpp3Dom) repository.getFilter(), serializer );
            }
            serializer.writeEndElement();
        }
    } //-- void writeRepository( Repository, String, XMLStreamWriter )

    /**
     * Method writeResolverSettings.
     * 
     * @param resolverSettings
     * @param serializer
     * @param tagName
     * @throws java.io.IOException
     * @throws XMLStreamException
     */
    private void writeResolverSettings( ResolverSettings resolverSettings, String tagName, XMLStreamWriter serializer )
        throws java.io.IOException, XMLStreamException
    {
        if ( resolverSettings != null )
        {
            serializer.writeStartElement( tagName );
            if ( resolverSettings.isDebug() != null )
            {
                serializer.writeStartElement( "debug" );
                serializer.writeCharacters( String.valueOf( resolverSettings.isDebug() ) );
                serializer.writeEndElement();
            }
            if ( ( resolverSettings.getLocalRepositories() != null ) && ( resolverSettings.getLocalRepositories().size() > 0 ) )
            {
                serializer.writeStartElement( "localRepositories" );
                for ( Iterator iter = resolverSettings.getLocalRepositories().iterator(); iter.hasNext(); )
                {
                    String localRepository = (String) iter.next();
                    serializer.writeStartElement( "repository" );
                    serializer.writeCharacters( localRepository );
                    serializer.writeEndElement();
                }
                serializer.writeEndElement();
            }
            if ( ( resolverSettings.getMetadataRepositories() != null ) && ( resolverSettings.getMetadataRepositories().size() > 0 ) )
            {
                serializer.writeStartElement( "metadataRepositories" );
                for ( Iterator iter = resolverSettings.getMetadataRepositories().iterator(); iter.hasNext(); )
                {
                    String metadataRepository = (String) iter.next();
                    serializer.writeStartElement( "repository" );
                    serializer.writeCharacters( metadataRepository );
                    serializer.writeEndElement();
                }
                serializer.writeEndElement();
            }
            if ( ( resolverSettings.getPrefixes() != null ) && ( resolverSettings.getPrefixes().size() > 0 ) )
            {
                serializer.writeStartElement( "prefixes" );
                for ( Iterator iter = resolverSettings.getPrefixes().iterator(); iter.hasNext(); )
                {
                    String prefix = (String) iter.next();
                    serializer.writeStartElement( "prefix" );
                    serializer.writeCharacters( prefix );
                    serializer.writeEndElement();
                }
                serializer.writeEndElement();
            }
            if ( ( resolverSettings.getBlacklist() != null ) && ( resolverSettings.getBlacklist().size() > 0 ) )
            {
                serializer.writeStartElement( "blacklist" );
                for ( Iterator iter = resolverSettings.getBlacklist().iterator(); iter.hasNext(); )
                {
                    Artifact o = (Artifact) iter.next();
                    writeArtifact( o, "artifact", serializer );
                }
                serializer.writeEndElement();
            }
            serializer.writeEndElement();
        }
    } //-- void writeResolverSettings( ResolverSettings, String, XMLStreamWriter )

    /**
     * Method writeStereotype.
     * 
     * @param stereotype
     * @param serializer
     * @param tagName
     * @throws java.io.IOException
     * @throws XMLStreamException
     */
    private void writeStereotype( Stereotype stereotype, String tagName, XMLStreamWriter serializer )
        throws java.io.IOException, XMLStreamException
    {
        if ( stereotype != null )
        {
            serializer.writeStartElement( tagName );
            if ( stereotype.getType() != null )
            {
                serializer.writeStartElement( "type" );
                serializer.writeCharacters( stereotype.getType() );
                serializer.writeEndElement();
            }
            if ( stereotype.getExtension() != null )
            {
                serializer.writeStartElement( "extension" );
                serializer.writeCharacters( stereotype.getExtension() );
                serializer.writeEndElement();
            }
            if ( stereotype.getClassifier() != null )
            {
                serializer.writeStartElement( "classifier" );
                serializer.writeCharacters( stereotype.getClassifier() );
                serializer.writeEndElement();
            }
            serializer.writeEndElement();
        }
    } //-- void writeStereotype( Stereotype, String, XMLStreamWriter )

}
