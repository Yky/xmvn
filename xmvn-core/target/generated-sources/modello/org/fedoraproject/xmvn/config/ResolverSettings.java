// =================== DO NOT EDIT THIS FILE ====================
// Generated by Modello 1.8.2,
// any modifications will be overwritten.
// ==============================================================

package org.fedoraproject.xmvn.config;

/**
 * XMvn settings related to resolution of artifacts.
 * 
 * @version $Revision$ $Date$
 */
@SuppressWarnings( "all" )
public class ResolverSettings
    implements java.io.Serializable, java.lang.Cloneable
{

      //--------------------------/
     //- Class/Member Variables -/
    //--------------------------/

    /**
     * 
     *             Whether detailed debugging information about
     * artifact
     *             resolution process should be logged.
     *           
     */
    private Boolean debug;

    /**
     * Field localRepositories.
     */
    private java.util.List<String> localRepositories;

    /**
     * Field metadataRepositories.
     */
    private java.util.List<String> metadataRepositories;

    /**
     * Field prefixes.
     */
    private java.util.List<String> prefixes;

    /**
     * Field blacklist.
     */
    private java.util.List<Artifact> blacklist;


      //-----------/
     //- Methods -/
    //-----------/

    /**
     * Method addBlacklist.
     * 
     * @param artifact
     */
    public void addBlacklist( Artifact artifact )
    {
        getBlacklist().add( artifact );
    } //-- void addBlacklist( Artifact )

    /**
     * Method addLocalRepository.
     * 
     * @param string
     */
    public void addLocalRepository( String string )
    {
        getLocalRepositories().add( string );
    } //-- void addLocalRepository( String )

    /**
     * Method addMetadataRepository.
     * 
     * @param string
     */
    public void addMetadataRepository( String string )
    {
        getMetadataRepositories().add( string );
    } //-- void addMetadataRepository( String )

    /**
     * Method addPrefix.
     * 
     * @param string
     */
    public void addPrefix( String string )
    {
        getPrefixes().add( string );
    } //-- void addPrefix( String )

    /**
     * Method clone.
     * 
     * @return ResolverSettings
     */
    public ResolverSettings clone()
    {
        try
        {
            ResolverSettings copy = (ResolverSettings) super.clone();

            if ( this.localRepositories != null )
            {
                copy.localRepositories = new java.util.ArrayList<String>();
                copy.localRepositories.addAll( this.localRepositories );
            }

            if ( this.metadataRepositories != null )
            {
                copy.metadataRepositories = new java.util.ArrayList<String>();
                copy.metadataRepositories.addAll( this.metadataRepositories );
            }

            if ( this.prefixes != null )
            {
                copy.prefixes = new java.util.ArrayList<String>();
                copy.prefixes.addAll( this.prefixes );
            }

            if ( this.blacklist != null )
            {
                copy.blacklist = new java.util.ArrayList<Artifact>();
                for ( Artifact item : this.blacklist )
                {
                    copy.blacklist.add( ( (Artifact) item).clone() );
                }
            }

            return copy;
        }
        catch ( java.lang.Exception ex )
        {
            throw (java.lang.RuntimeException) new java.lang.UnsupportedOperationException( getClass().getName()
                + " does not support clone()" ).initCause( ex );
        }
    } //-- ResolverSettings clone()

    /**
     * Method getBlacklist.
     * 
     * @return List
     */
    public java.util.List<Artifact> getBlacklist()
    {
        if ( this.blacklist == null )
        {
            this.blacklist = new java.util.ArrayList<Artifact>();
        }

        return this.blacklist;
    } //-- java.util.List<Artifact> getBlacklist()

    /**
     * Method getLocalRepositories.
     * 
     * @return List
     */
    public java.util.List<String> getLocalRepositories()
    {
        if ( this.localRepositories == null )
        {
            this.localRepositories = new java.util.ArrayList<String>();
        }

        return this.localRepositories;
    } //-- java.util.List<String> getLocalRepositories()

    /**
     * Method getMetadataRepositories.
     * 
     * @return List
     */
    public java.util.List<String> getMetadataRepositories()
    {
        if ( this.metadataRepositories == null )
        {
            this.metadataRepositories = new java.util.ArrayList<String>();
        }

        return this.metadataRepositories;
    } //-- java.util.List<String> getMetadataRepositories()

    /**
     * Method getPrefixes.
     * 
     * @return List
     */
    public java.util.List<String> getPrefixes()
    {
        if ( this.prefixes == null )
        {
            this.prefixes = new java.util.ArrayList<String>();
        }

        return this.prefixes;
    } //-- java.util.List<String> getPrefixes()

    /**
     * Get whether detailed debugging information about artifact
     *             resolution process should be logged.
     * 
     * @return Boolean
     */
    public Boolean isDebug()
    {
        return this.debug;
    } //-- Boolean isDebug()

    /**
     * Method removeBlacklist.
     * 
     * @param artifact
     */
    public void removeBlacklist( Artifact artifact )
    {
        getBlacklist().remove( artifact );
    } //-- void removeBlacklist( Artifact )

    /**
     * Method removeLocalRepository.
     * 
     * @param string
     */
    public void removeLocalRepository( String string )
    {
        getLocalRepositories().remove( string );
    } //-- void removeLocalRepository( String )

    /**
     * Method removeMetadataRepository.
     * 
     * @param string
     */
    public void removeMetadataRepository( String string )
    {
        getMetadataRepositories().remove( string );
    } //-- void removeMetadataRepository( String )

    /**
     * Method removePrefix.
     * 
     * @param string
     */
    public void removePrefix( String string )
    {
        getPrefixes().remove( string );
    } //-- void removePrefix( String )

    /**
     * Set list of blacklisted artifacts which will not be
     * resolved.
     * 
     * @param blacklist
     */
    public void setBlacklist( java.util.List<Artifact> blacklist )
    {
        this.blacklist = blacklist;
    } //-- void setBlacklist( java.util.List )

    /**
     * Set whether detailed debugging information about artifact
     *             resolution process should be logged.
     * 
     * @param debug
     */
    public void setDebug( Boolean debug )
    {
        this.debug = debug;
    } //-- void setDebug( Boolean )

    /**
     * Set list of local repositories where XMvn will look for
     * artifacts.
     * 
     * @param localRepositories
     */
    public void setLocalRepositories( java.util.List<String> localRepositories )
    {
        this.localRepositories = localRepositories;
    } //-- void setLocalRepositories( java.util.List )

    /**
     * Set list of repositories where XMvn will look for metadata
     *             files.
     * 
     * @param metadataRepositories
     */
    public void setMetadataRepositories( java.util.List<String> metadataRepositories )
    {
        this.metadataRepositories = metadataRepositories;
    } //-- void setMetadataRepositories( java.util.List )

    /**
     * Set list of prefixes that XMvn resolver will prepend to
     * system
     *             repositories.
     * 
     * @param prefixes
     */
    public void setPrefixes( java.util.List<String> prefixes )
    {
        this.prefixes = prefixes;
    } //-- void setPrefixes( java.util.List )

}
